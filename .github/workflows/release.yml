name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
        enable-cache: true
    
    - name: Set up Python
      run: uv python install 3.13
    
    - name: Cache uv dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/uv
          .venv
        key: ${{ runner.os }}-uv-${{ hashFiles('uv.lock') }}
        restore-keys: |
          ${{ runner.os }}-uv-
    
    - name: Install dependencies
      run: uv sync --dev
    
    - name: Print tool versions
      run: |
        echo "ðŸ“¦ Tool versions:"
        echo "  Python: $(uv run python --version)"
        echo "  uv: $(uv --version)"
        echo "  ruff: $(uv run ruff --version)"
        echo "  mypy: $(uv run mypy --version)"
        echo "  pytest: $(uv run pytest --version)"
    
    - name: Run ruff linter
      run: uv run ruff check src tests
    
    - name: Run ruff formatter
      run: uv run ruff format --check src tests
    
    - name: Run mypy type checker
      run: uv run mypy src tests
    
    - name: Run tests with coverage
      run: uv run pytest -v --cov=src --cov-report=xml --cov-report=term-missing tests
  
  build:
    needs: test
    runs-on: ${{ matrix.os }}
    permissions:
      contents: read
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
        enable-cache: true
    
    - name: Set up Python
      run: uv python install 3.13
    
    - name: Cache uv dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/uv
          .venv
        key: ${{ matrix.os }}-uv-${{ hashFiles('uv.lock') }}
        restore-keys: |
          ${{ matrix.os }}-uv-
    
    - name: Install dependencies
      run: uv sync --all-groups
    
    - name: Print tool versions
      run: |
        echo "ðŸ“¦ Tool versions:"
        echo "  Python: $(uv run python --version)"
        echo "  uv: $(uv --version)"
    
    - name: Build native binary with Nuitka
      shell: bash
      run: |
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          uv run python -m nuitka --onefile --standalone --output-filename=pyao-server.exe \
            --enable-plugin=pyside6 --follow-imports --include-module=redis \
            --include-module=argon2 --windows-disable-console src/run_server.py
        elif [ "${{ matrix.os }}" = "macos-latest" ]; then
          uv run python -m nuitka --onefile --standalone --output-filename=pyao-server-macos \
            --enable-plugin=pyside6 --follow-imports --include-module=redis \
            --include-module=argon2 src/run_server.py
        else
          uv run python -m nuitka --onefile --standalone --output-filename=pyao-server-linux \
            --enable-plugin=pyside6 --follow-imports --include-module=redis \
            --include-module=argon2 src/run_server.py
        fi
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-${{ matrix.os }}
        path: |
          pyao-server.exe
          pyao-server-macos
          pyao-server-linux
  
  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: dist-all
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: dist-all/**/*
        generate_release_notes: true
