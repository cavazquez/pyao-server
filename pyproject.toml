[project]
name = "src"
version = "0.2.0-alpha"
description = "Servidor de Argentum Online en Python"
readme = "README.md"
requires-python = ">=3.14"
dependencies = [
    "redis>=5.2.0",
]

[dependency-groups]
dev = [
    "ruff>=0.8.0",
    "pytest>=8.0.0",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=6.0.0",
    "mypy>=1.13.0",
    "fakeredis>=2.26.0",
]
build = [
    "hatchling>=1.25.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project.scripts]
pyao-server = "src.run_server:main"

[tool.ruff]
line-length = 100
target-version = "py314"

[tool.ruff.lint]
select = [
    "ALL"  # Habilitar todas las reglas
]
ignore = [
    "D203",    # one-blank-line-before-class (conflicto con D211)
    "D213",    # multi-line-summary-second-line (conflicto con D212)
    "COM812",  # missing-trailing-comma (conflicto con formatter)
    "ISC001",  # single-line-implicit-string-concatenation (conflicto con formatter)
    "T201",    # print statements (permitido)
    "CPY001",  # copyright notice (no requerido)
    "S104",    # binding to all interfaces (intencional para servidor)
    "TC003",   # asyncio usado en runtime, no solo type-checking
    "FIX002",  # line-contains-todo (permitido)
    "TD002",   # missing author in TODO (no requerido)
    "TD003",   # missing issue link in TODO (no requerido)
    "PLR0913", # too many arguments (necesario para protocolos)
    "PLR0917", # too many positional arguments (necesario para protocolos)
    "PLR0911", # too many return statements (lógica de negocio compleja)
    "PLR0912", # too many branches (lógica de negocio compleja con validaciones)
    "FBT001",  # boolean positional argument (necesario para protocolos)
    "FBT002",  # boolean default positional argument (necesario para NPCs)
    "C901",    # function is too complex (lógica de negocio compleja)
]
preview = true  # Habilitar reglas experimentales

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.pylint]
max-public-methods = 30
max-returns = 8

[tool.ruff.format]
quote-style = "double"
indent-style = "space"

[tool.mypy]
python_version = "3.14"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_generics = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
strict_equality = true
strict_concatenate = true

[[tool.mypy.overrides]]
module = "tests.*"
ignore_errors = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
# No fallar si no hay tests
addopts = "--strict-markers -q"

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    "S101",    # assert permitido en tests
    "S105",    # contraseñas hardcodeadas permitidas en tests
    "PLR2004", # magic values permitidos en tests
    "D104",    # docstring en __init__.py no requerido
    "PLR6301", # métodos de test pueden usar self
    "ERA001",  # código comentado permitido en tests
    "ANN001",  # anotaciones de tipos no requeridas en tests
    "ANN201",  # return type annotation no requerida en tests
    "ANN202",  # return type annotation no requerida en funciones privadas de tests
    "DOC201",  # return documentation no requerida en fixtures
    "RUF029",  # async sin await permitido en mocks
    "SIM118",  # simplificaciones no requeridas en tests
]
"tools/**/*.py" = [
    "PLR1702", # parsers pueden tener muchos bloques anidados
    "C901",    # parsers pueden ser complejos
    "PLR0912", # parsers pueden tener muchas ramas
]
"src/bank_repository.py" = [
    "UP037",   # quotes necesarias para TYPE_CHECKING
]
"src/inventory_repository.py" = [
    "UP037",   # quotes necesarias para TYPE_CHECKING
]
